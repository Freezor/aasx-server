name: Build-and-package-release-workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Build-and-package-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set execution policy
        shell: pwsh
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process

      - name: Extract branch name
        id: extract_branch
        run: |
          # Fetch all branches
          git fetch --all
          
          # Get the commit SHA for the current ref
          $commitSHA = git rev-parse HEAD
          
          # Find the branch that contains this commit
          $branch = git branch -r --contains $commitSHA | Select-String -Pattern 'origin/' | Select-Object -First 1 |
                  ForEach-Object { $_.Line -replace '.*origin/', '' } | ForEach-Object { $_.Trim() }
          
          echo "branch=$branch" >> $env:GITHUB_OUTPUT

      - name: Infer the version from the GitHub ref
        id: inferVersion
        working-directory: src
        needs: extract_branch
        run: |
          $branch = '${{ steps.extract_branch.outputs.branch }}'
          $version = .\BuildVersionNumber.ps1 -suffix alpha -branch $branch -githubRunNumber ${{ github.run_number }}
          Write-Host "Inferred version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Update version numbers in project
        working-directory: src
        needs: inferVersion
        run: |
          $version = '${{ steps.inferVersion.outputs.version }}'
          Write-Host "Updating project versions to: $version"
          .\UpdateProjectVersions.ps1 -version $version
        shell: pwsh

      - name: Build for release
        working-directory: src
        run: .\BuildForRelease.ps1
        shell: pwsh

      - name: Rename the release assets
        id: rename_release_assets
        working-directory: .
        needs: inferVersion
        run: |
          $version = '${{ steps.inferVersion.outputs.version }}'
          $releaseDir = Join-Path $(Get-Location) "artefacts/release/$version"
          Write-Host "Release directory: $releaseDir"

          if (!(Test-Path $releaseDir)) {
              throw "The release directory does not exist: $releaseDir"
          }

          $archives = Get-ChildItem $releaseDir -Filter *.zip
          foreach($archive in $archives) {
              $path = $archive.FullName
              Write-Host "The path to the archive is: $path"

              $nameWoExt = [io.path]::GetFileNameWithoutExtension($path)
              Write-Host "The name without extension is: $nameWoExt"

              $target = Join-Path $releaseDir ($nameWoExt + "." + $version + ".zip")
              Write-Host "Moving: $path -> $target"
              Move-Item -Path $path -Destination $target
          }
        shell: pwsh

      - name: Package the release
        id: package_release
        working-directory: src
        needs: [ inferVersion,rename_release_assets ]
        run: |
          $version = '${{ steps.inferVersion.outputs.version }}'
          Write-Host "Packaging for the release version: $version"
          .\PackageRelease.ps1 -version $version
        shell: pwsh

      - name: Verify the release assets
        working-directory: .
        needs: [ inferVersion,package_release ]
        run: |
          $version = '${{ steps.inferVersion.outputs.version }}'
          $releaseDir = Join-Path $(Get-Location) "artefacts/release/$version"
          Write-Host "Verifying contents of the release directory: $releaseDir"
          Get-ChildItem $releaseDir

      - name: Delete latest pre-release
        id: delete_latest_pre_release
        run: |
          $latestPreRelease = gh api repos/${{ github.repository }}/releases --jq '[.[] | select(.prerelease)] | max_by(.created_at) | .id'
          if ($latestPreRelease) {
            gh api repos/${{ github.repository }}/releases/$latestPreRelease -X DELETE
            Write-Host "Deleted pre-release with ID: $latestPreRelease"
          } else {
            Write-Host "No pre-releases found to delete."
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Create new pre-release
        id: create_pre_release
        needs: delete_latest_pre_release
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.inferVersion.outputs.version }}"
          release_name: "Release v${{ steps.inferVersion.outputs.version }}"
          draft: false
          prerelease: true
          body: "Pre-release for version ${{ steps.inferVersion.outputs.version }}"

      - name: Upload the release assets
        uses: AButler/upload-release-assets@v3.0
        needs: create_pre_release
        with:
          files: "artefacts/release/${{ steps.inferVersion.outputs.version }}/*.zip"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: "v${{ steps.inferVersion.outputs.version }}"
