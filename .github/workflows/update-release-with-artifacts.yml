name: Update Release with Artifacts

on:
  release:
    types:
      - created

jobs:
  update_release:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set execution policy
        shell: pwsh
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process

      - name: Extract branch name
        id: extract_branch
        run: |
          git fetch --all
          $commitSHA = git rev-parse HEAD
          $branch = git branch -r --contains $commitSHA | Select-String -Pattern 'origin/' | Select-Object -First 1 | ForEach-Object { $_.Line -replace '.*origin/', '' } | ForEach-Object { $_.Trim() }
          echo "branch=$branch" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Infer the version
        id: infer_version
        run: |
          $branch = '${{ steps.extract_branch.outputs.branch }}'
          $version = .\BuildVersionNumber.ps1 -suffix alpha -branch $branch -githubRunNumber ${{ github.run_number }}
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Update version numbers
        run: .\UpdateProjectVersions.ps1 -version '${{ steps.infer_version.outputs.version }}'
        shell: pwsh

      - name: Build for release
        run: .\BuildForRelease.ps1
        shell: pwsh

      - name: Verify and list artefacts directory
        run: |
          $version = '${{ steps.infer_version.outputs.version }}'
          $releaseDir = Join-Path $(Get-Location) "artefacts/release/$version"
          if (!(Test-Path $releaseDir)) { Write-Host "The release directory does not exist." } else { Write-Host "The release directory exists. Listing contents:"; Get-ChildItem $releaseDir }
        shell: pwsh

      - name: Rename release assets
        run: |
          $version = '${{ steps.infer_version.outputs.version }}'
          $releaseDir = Join-Path $(Get-Location) "artefacts/release/$version"
          if (!(Test-Path $releaseDir)) { throw "The release directory does not exist: $releaseDir" }
          $archives = Get-ChildItem $releaseDir -Filter *.zip
          foreach($archive in $archives) {
              $path = $archive.FullName
              $nameWoExt = [io.path]::GetFileNameWithoutExtension($path)
              $target = Join-Path $releaseDir ($nameWoExt + "." + $version + ".zip")
              Move-Item -Path $path -Destination $target
          }
        shell: pwsh

      - name: Package the release
        run: .\PackageRelease.ps1 -version '${{ steps.infer_version.outputs.version }}'
        shell: pwsh

      - name: Upload release assets
        uses: AButler/upload-release-assets@v3.0
        with:
          files: "artefacts/release/${{ steps.infer_version.outputs.version }}/*.zip"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: "v${{ steps.infer_version.outputs.version }}"
