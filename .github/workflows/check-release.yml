name: Check-release-workflow

on:
  pull_request:
    branches:
      - main
      - release
    types: [ opened, synchronize, reopened, edited ]
  push:
    branches:
      - main

jobs:
  Check-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set execution policy
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
        shell: pwsh

      - name: Extract branch name
        id: extract_branch
        run: |
          git fetch --all
          $commitSHA = git rev-parse HEAD
          $branch = git branch -r --contains $commitSHA | Select-String -Pattern 'origin/' | Select-Object -First 1 | ForEach-Object { $_.Line -replace '.*origin/', '' } | ForEach-Object { $_.Trim() }
          echo "branch=$branch" >> $env:GITHUB_OUTPUT
          Write-Host "The current branch is: $branch"
        shell: pwsh

      - name: Get the newest develop or latest tag
        id: get_latest_tag
        run: |
          $stableTags = git tag --list "*develop*" --sort=-v:refname
          if ($stableTags) {
            $newestStableTag = $stableTags | Select-Object -First 1
            echo "from_tag=$newestStableTag" >> $env:GITHUB_OUTPUT
            Write-Host "Latest found tag is $from_tag"
          } else {
            Write-Host "No stable tags found, fetching the latest tag."
            $latestTag = git tag --list --sort=-v:refname | Select-Object -First 1
            if ($latestTag) {
              echo "from_tag=$latestTag" >> $env:GITHUB_OUTPUT
              Write-Host "Latest found tag is $from_tag"
            } else {
              Write-Host "No tags found at all."
            }
          }
        shell: pwsh

      - name: Generate Version Number
        working-directory: src
        id: generate_version_number
        run: |
          $branch = '${{ steps.extract_branch.outputs.branch }}'
          $version = .\BuildVersionNumber.ps1 -suffix alpha -branch $branch -githubRunNumber ${{ github.run_number }}
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "The version name to build is: $version"
        shell: pwsh

      - name: Update version numbers in project
        working-directory: src
        run: |
          $version = '${{ steps.generate_version_number.outputs.version }}'
          Write-Host "Updating project versions to: $version"
          .\UpdateProjectVersions.ps1 -version $version
        shell: pwsh

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Build release
        working-directory: src
        run: .\BuildForRelease.ps1
        shell: pwsh

      - name: Set timestamp
        id: set_timestamp
        run: |
          $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH-mm-ssZ")
          if ($timestamp -match "'|\"|:")
          {
              throw "Unexpected characters in timestamp: $timestamp"
          }
        shell: pwsh

      - name: Package release
        working-directory: src
        run: |
          $version = '${{ steps.generate_version_number.outputs.version }}'
          $timestamp = '${{ steps.set_timestamp.outputs.timestamp }}'
          mkdir -p artefacts/release/$version.$timestamp
          Write-Host "Packaging for the release version: $version.$timestamp"
          .\PackageRelease.ps1 -version $version.$timestamp
        shell: pwsh

      - name: Upload AasxServerBlazor
        uses: actions/upload-artifact@v3
        with:
          name: AasxServerBlazor.LATEST.${{ steps.generate_version_number.outputs.version }}.${{ steps.set_timestamp.outputs.timestamp }}
          path: artefacts/release/LATEST.alpha/AasxServerBlazor.zip

      - name: Upload AasxServerAspNetCore
        uses: actions/upload-artifact@v3
        with:
          name: AasxServerAspNetCore.LATEST.${{ steps.generate_version_number.outputs.version }}.${{ steps.set_timestamp.outputs.timestamp }}
          path: artefacts/release/LATEST.alpha/AasxServerAspNetCore.zip
